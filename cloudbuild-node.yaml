options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Deploy Backend to Cloud Run first to get its URL
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:$BUILD_ID'
      - '.'
    dir: 'node-backend'
    id: 'Build Backend Docker Image'

  # Step 2: Push Backend Image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:$BUILD_ID'
    id: 'Push Backend Image'
    waitFor: ['Build Backend Docker Image']

  # Step 3: Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'my-rhyme-app-backend'
      - '--image'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--set-secrets=ANTHROPIC_API_KEY=apikey:latest'
      - '--set-env-vars=NODE_ENV=production'
      - '--service-account=my-rhyme-app-service@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--min-instances=0'
      - '--max-instances=100'
      - '--memory=512Mi'
      - '--cpu=1'
    id: 'Deploy Backend to Cloud Run'
    waitFor: ['Push Backend Image']

  # Step 4: Get the Cloud Run service URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe my-rhyme-app-backend --region=us-central1 --format='value(status.url)')
        echo "Backend URL: $$SERVICE_URL"
        echo "$$SERVICE_URL" > /workspace/backend_url.txt
    id: 'Get Backend URL'
    waitFor: ['Deploy Backend to Cloud Run']

  # Step 5: Write .env file for frontend with Firebase config and Backend URL
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        echo "VITE_FIREBASE_API_KEY=$_VITE_FIREBASE_API_KEY" > .env
        echo "VITE_FIREBASE_AUTH_DOMAIN=$_VITE_FIREBASE_AUTH_DOMAIN" >> .env
        echo "VITE_FIREBASE_PROJECT_ID=$_VITE_FIREBASE_PROJECT_ID" >> .env
        echo "VITE_FIREBASE_STORAGE_BUCKET=$_VITE_FIREBASE_STORAGE_BUCKET" >> .env
        echo "VITE_FIREBASE_MESSAGING_SENDER_ID=$_VITE_FIREBASE_MESSAGING_SENDER_ID" >> .env
        echo "VITE_FIREBASE_APP_ID=$_VITE_FIREBASE_APP_ID" >> .env
        echo "VITE_API_URL=$$BACKEND_URL/api" >> .env
        mv .env my-rhyme-app/.env
        echo "--- Frontend .env file ---"
        cat my-rhyme-app/.env
    id: 'Write Frontend .env'
    waitFor: ['Get Backend URL']

  # Step 6: Install frontend dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['ci', '--legacy-peer-deps']
    dir: 'my-rhyme-app'
    id: 'Install Frontend Dependencies'
    waitFor: ['Write Frontend .env']

  # Step 7: Build the frontend application
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build']
    dir: 'my-rhyme-app'
    id: 'Build Frontend'
    waitFor: ['Install Frontend Dependencies']

  # Step 8: Deploy to Firebase Hosting
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g firebase-tools
        firebase deploy --only hosting --project ${PROJECT_ID}
    dir: 'my-rhyme-app'
    id: 'Deploy to Firebase Hosting'
    waitFor: ['Build Frontend']

images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:$BUILD_ID'

timeout: '1800s' # 30 minutes timeout 