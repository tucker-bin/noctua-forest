rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    // Admin flag stored in users/{uid}.isAdmin or .admin
    function isAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true;
    }

    // Users
    match /users/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create: if isOwner(uid);
      allow update: if isOwner(uid) || isAdmin();
      allow delete: if isAdmin();
    }

    // Public books
    match /books/{bookId} {
      allow read: if true;
      // Allow any signed-in user to propose/create a book record (review flow)
      allow create: if isSignedIn();
      // Restrict modifications to admins (content curation)
      allow update, delete: if isAdmin();
    }

    // Submissions (unpublished) â€” allow create for signed-in users as fallback queue
    match /submissions/{submissionId} {
      allow create: if isSignedIn();
      // owners can read their own; admins can list/read all
      allow read: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid);
      // owners can update their own before approval; admins manage
      allow update: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid && resource.data.approved != true);
      allow delete: if isAdmin() || (isSignedIn() && resource.data.userId == request.auth.uid && resource.data.approved != true);
    }

    // Reviews
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for Forest display
      // Allow any signed-in user to create their review. Verify ownership on update/delete.
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || (isSignedIn() && (
        resource.data.userId == request.auth.uid ||
        resource.data.authorId == request.auth.uid
      ));
    }

    // Reading list items (legacy)
    match /readingList/{itemId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Reading lists (new structure)
    match /readingLists/{listId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // List shares
    match /listShares/{shareId} {
      allow read: if true; // Public shares
      allow create, update, delete: if isSignedIn();
    }

    // List saves
    match /listSaves/{saveId} {
      allow read, create, update, delete: if isSignedIn();
    }

    // List attributions
    match /listAttributions/{attributionId} {
      allow read, create, update, delete: if isSignedIn();
    }

    // Newsletter subscribers (email only)
    match /newsletter_subscribers/{subId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    // Flagged content for moderation
    match /flagged_content/{flagId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // Reports
    match /reports/{reportId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // Sales tracking
    match /sales/{saleId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isAdmin();
    }

    // Analytics collections
    match /analytics/{analyticsId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /listViews/{viewId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /listClicks/{clickId} {
      allow create: if isSignedIn();
      allow read, update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Curator landing pages
    match /curatorLandingPages/{userId} {
      allow read, create, update, delete: if isSignedIn() && 
        (request.auth.uid == userId || isAdmin());
    }

    // To-review queue
    match /toReviewQueue/{queueId} {
      allow read, create, update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Support tickets
    match /supportTickets/{ticketId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isSignedIn() && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Memberships
    match /memberships/{membershipId} {
      allow read: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create, update, delete: if isAdmin();
    }

    // Book Clubs
    match /bookClubs/{clubId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if isSignedIn() && (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    // Book Club Members
    match /bookClubMembers/{memberId} {
      allow read: if isSignedIn() && (resource.data.ownerId == request.auth.uid || resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && (resource.data.ownerId == request.auth.uid || resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Book Club Lists (reading lists attached to clubs)
    match /bookClubLists/{associationId} {
      allow read: if true; // Public read access for club landing pages
      allow create, update, delete: if isSignedIn() && (
        get(/databases/$(database)/documents/bookClubs/$(request.resource.data.clubId)).data.ownerId == request.auth.uid || 
        isAdmin()
      );
    }
    
    // List Click Tracking
    match /listClicks/{clickId} {
      allow create: if true; // Allow anonymous tracking
      allow read, update, delete: if isSignedIn() && (
        get(/databases/$(database)/documents/bookClubs/$(resource.data.pageId)).data.ownerId == request.auth.uid || 
        isAdmin()
      );
    }
  }
}