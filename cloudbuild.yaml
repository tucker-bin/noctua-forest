options:
  logging: CLOUD_LOGGING_ONLY
steps:
  # Step 0: Write .env file with Firebase config
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "VITE_FIREBASE_API_KEY=$_VITE_FIREBASE_API_KEY" > .env
        echo "VITE_FIREBASE_AUTH_DOMAIN=$_VITE_FIREBASE_AUTH_DOMAIN" >> .env
        echo "VITE_FIREBASE_PROJECT_ID=$_VITE_FIREBASE_PROJECT_ID" >> .env
        echo "VITE_FIREBASE_STORAGE_BUCKET=$_VITE_FIREBASE_STORAGE_BUCKET" >> .env
        echo "VITE_FIREBASE_MESSAGING_SENDER_ID=$_VITE_FIREBASE_MESSAGING_SENDER_ID" >> .env
        echo "VITE_FIREBASE_APP_ID=$_VITE_FIREBASE_APP_ID" >> .env
        mv .env my-rhyme-app/.env
    id: 'Write Firebase .env'

  # Step 0.5: Print .env file for debugging
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo '--- DEBUG: Printing my-rhyme-app/.env ---'
        cat my-rhyme-app/.env
    id: 'Print .env for Debug'
    waitFor: ['Write Firebase .env']

  # Step 1: Install frontend dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    dir: 'my-rhyme-app'
    id: 'Install Frontend Dependencies'
    waitFor: ['Print .env for Debug']

  # Step 2: Build the frontend application
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build']
    dir: 'my-rhyme-app'
    id: 'Build Frontend'
    waitFor: ['Install Frontend Dependencies']

  # Step 3: Deploy to Firebase Hosting (install Firebase CLI first)
  - name: 'node:20'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g firebase-tools
        firebase deploy --only hosting --project ${PROJECT_ID}
    dir: 'my-rhyme-app'
    id: 'Deploy to Firebase Hosting'
    waitFor: ['Build Frontend']

  # Step 4: Build Docker Image for the backend
  # This step runs from the root project directory where your Dockerfile is located.
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-py:$BUILD_ID'
      - '.' # Docker build context is the root
    id: 'Build Docker Image'
    # This can run in parallel with frontend steps if desired, or wait for them.
    # For simplicity, placing it here implies it runs after or parallel to some frontend steps,
    # depending on Cloud Build's optimization. If strict ordering is needed before backend build, adjust waitFor.

  # Step 5: Push Image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-py:$BUILD_ID'
    id: 'Push Image to Artifact Registry'
    waitFor: ['Build Docker Image']

  # Step 6: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'my-rhyme-app'
      - '--image'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-py:$BUILD_ID'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--set-secrets=ANTHROPIC_API_KEY=apikey:latest'
      - '--set-env-vars=FLASK_ENV=production'
      - '--service-account=my-rhyme-app-service@${PROJECT_ID}.iam.gserviceaccount.com'
    id: 'Deploy to Cloud Run'
    waitFor: ['Push Image to Artifact Registry', 'Deploy to Firebase Hosting']

images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-py:$BUILD_ID'
timeout: '1800s' # Increased timeout to 30 minutes