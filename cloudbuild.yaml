# Cloud Build configuration for Noctua Rhyme Observatory
# This deploys both the Node.js backend to Cloud Run and the React frontend to Firebase Hosting

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

steps:
  # Step 1: Build Backend Docker Image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:${BUILD_ID}'
      - '-t'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:latest'
      - '.'
    dir: 'node-backend'
    id: 'Build Backend Docker Image'

  # Step 2: Push Backend Image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - '--all-tags'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node'
    id: 'Push Backend Image'
    waitFor: ['Build Backend Docker Image']

  # Step 3: Deploy Backend to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'my-rhyme-app-backend'
      - '--image'
      - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:${BUILD_ID}'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'
      - '--port'
      - '8080'
      - '--set-secrets=ANTHROPIC_API_KEY=apikey:latest'
      - '--set-env-vars=NODE_ENV=production,CORS_ORIGIN=https://my-rhyme-app.web.app'
      - '--service-account=my-rhyme-app-service@${PROJECT_ID}.iam.gserviceaccount.com'
      - '--min-instances=0'
      - '--max-instances=100'
      - '--memory=512Mi'
      - '--cpu=1'
      - '--timeout=300'
    id: 'Deploy Backend to Cloud Run'
    waitFor: ['Push Backend Image']

  # Step 4: Get the Cloud Run service URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        SERVICE_URL=$(gcloud run services describe my-rhyme-app-backend --region=us-central1 --format='value(status.url)')
        echo "Backend URL: $$SERVICE_URL"
        echo "$$SERVICE_URL" > /workspace/backend_url.txt
    id: 'Get Backend URL'
    waitFor: ['Deploy Backend to Cloud Run']

  # Step 5: Write .env file for frontend with Firebase config and Backend URL
  - name: 'ubuntu'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$(cat /workspace/backend_url.txt)
        echo "Creating frontend .env file..."
        echo "VITE_FIREBASE_API_KEY=${_VITE_FIREBASE_API_KEY}" > my-rhyme-app/.env
        echo "VITE_FIREBASE_AUTH_DOMAIN=${_VITE_FIREBASE_AUTH_DOMAIN}" >> my-rhyme-app/.env
        echo "VITE_FIREBASE_PROJECT_ID=${_VITE_FIREBASE_PROJECT_ID}" >> my-rhyme-app/.env
        echo "VITE_FIREBASE_STORAGE_BUCKET=${_VITE_FIREBASE_STORAGE_BUCKET}" >> my-rhyme-app/.env
        echo "VITE_FIREBASE_MESSAGING_SENDER_ID=${_VITE_FIREBASE_MESSAGING_SENDER_ID}" >> my-rhyme-app/.env
        echo "VITE_FIREBASE_APP_ID=${_VITE_FIREBASE_APP_ID}" >> my-rhyme-app/.env
        echo "VITE_API_URL=$$BACKEND_URL/api" >> my-rhyme-app/.env
        echo "--- Frontend .env file contents ---"
        cat my-rhyme-app/.env
    id: 'Write Frontend .env'
    waitFor: ['Get Backend URL']

  # Step 6: Install frontend dependencies
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['ci', '--legacy-peer-deps']
    dir: 'my-rhyme-app'
    id: 'Install Frontend Dependencies'
    waitFor: ['Write Frontend .env']

  # Step 7: Build the frontend application
  - name: 'node:20'
    entrypoint: 'npm'
    args: ['run', 'build']
    dir: 'my-rhyme-app'
    id: 'Build Frontend'
    waitFor: ['Install Frontend Dependencies']

  # Step 8: Deploy to Firebase Hosting
  - name: 'gcr.io/${PROJECT_ID}/firebase'
    args: ['deploy', '--only', 'hosting', '--project', '${PROJECT_ID}']
    id: 'Deploy to Firebase Hosting'
    waitFor: ['Build Frontend']

# Images to be pushed to Artifact Registry
images:
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:${BUILD_ID}'
  - 'us-central1-docker.pkg.dev/${PROJECT_ID}/my-rhyme-app-images/my-rhyme-app-node:latest'

# Build timeout
timeout: '1800s' # 30 minutes

# Substitutions - These should be set in your Cloud Build trigger or passed as arguments
substitutions:
  _VITE_FIREBASE_API_KEY: 'AIzaSyDkrIV0Ji28ULmGHDl6mLTMvRWQsyR4XFg'
  _VITE_FIREBASE_AUTH_DOMAIN: 'my-rhyme-app.firebaseapp.com'
  _VITE_FIREBASE_PROJECT_ID: 'my-rhyme-app'
  _VITE_FIREBASE_STORAGE_BUCKET: 'my-rhyme-app.appspot.com'
  _VITE_FIREBASE_MESSAGING_SENDER_ID: '487322724536'
  _VITE_FIREBASE_APP_ID: '1:487322724536:web:a5eb91460b22e57e2b2c4d' 